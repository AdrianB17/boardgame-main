name: Java CI with Maven & Build and Deploy to ECS

on:
  push:
    branches:
      - main
    paths:
      - '**'
  pull_request:
    branches:
      - main
    paths:
      - '**'

jobs:
  build-and-push-ecr:
    name: Build, Test, Analyze, and Push to ECR
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    env:
      ENV: dev

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build, Test and SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=AdrianB17_boardgame-main \
            -Dsonar.organization=adrianb17 \
            -Dsonar.host.url=https://sonarcloud.io

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image to ECR
        id: build-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: belcorp-0000-demo-${{ env.ENV }}-images-repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/belcorp-0000-demo-${{ env.ENV }}-images-repository:${{ github.sha }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker Image to ECR
        if: success()  
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: belcorp-0000-demo-${{ env.ENV }}-images-repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  trigger-deploy-ecs:
    name: Trigger ECS Deployment
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    needs: build-and-push-ecr

    steps:
      - name: Trigger ECS Deployment Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: code-deploy-ecs-event
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
